import { useState, useCallback } from 'react'
import { supabase } from '../lib/supabase'

export interface MaterialSearchResult {
  id: number
  name: string
  brand: string
  article: string | null
  brand_code: string
  cli_code: string | null
  class: string
  class_code: string
  similarity_score?: number
  match_score?: number
}

export const useMaterialSearch = () => {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  // –ü–æ–∏—Å–∫ –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É –Ω–∞–∑–≤–∞–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É—è pg_trgm)
  const searchBySimilarity = useCallback(async (
    searchName: string,
    similarityThreshold: number = 0.3,
    limitResults: number = 10
  ): Promise<MaterialSearchResult[]> => {
    if (!searchName.trim()) {
      return []
    }

    setLoading(true)
    setError(null)

    try {
      const { data, error: dbError } = await supabase
        .rpc('search_materials_by_name', {
          search_name: searchName,
          similarity_threshold: similarityThreshold,
          limit_results: limitResults
        })

      if (dbError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É:', dbError)
        setError(dbError.message)
        return []
      }

      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${data?.length || 0} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É –¥–ª—è "${searchName}"`)
      return data || []

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', err)
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      return []
    } finally {
      setLoading(false)
    }
  }, [])

  // –ü–æ–∏—Å–∫ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
  const findExactMatches = useCallback(async (
    searchName: string
  ): Promise<MaterialSearchResult[]> => {
    if (!searchName.trim()) {
      return []
    }

    setLoading(true)
    setError(null)

    try {
      const { data, error: dbError } = await supabase
        .rpc('find_exact_material_matches', {
          search_name: searchName
        })

      if (dbError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', dbError)
        setError(dbError.message)
        return []
      }

      console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${data?.length || 0} —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è "${searchName}"`)
      return data || []

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–æ—á–Ω–æ–º –ø–æ–∏—Å–∫–µ:', err)
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      return []
    } finally {
      setLoading(false)
    }
  }, [])

  // –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const searchByKeywords = useCallback(async (
    searchName: string,
    minWordLength: number = 3,
    limitResults: number = 10
  ): Promise<MaterialSearchResult[]> => {
    if (!searchName.trim()) {
      return []
    }

    setLoading(true)
    setError(null)

    try {
      const { data, error: dbError } = await supabase
        .rpc('search_materials_by_keywords', {
          search_name: searchName,
          min_word_length: minWordLength,
          limit_results: limitResults
        })

      if (dbError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:', dbError)
        setError(dbError.message)
        return []
      }

      console.log(`üîë –ù–∞–π–¥–µ–Ω–æ ${data?.length || 0} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –¥–ª—è "${searchName}"`)
      return data || []

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:', err)
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      return []
    } finally {
      setLoading(false)
    }
  }, [])

  // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (—Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø–æ—Ç–æ–º –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É, –∑–∞—Ç–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)
  const searchMaterials = useCallback(async (
    searchName: string,
    options?: {
      similarityThreshold?: number
      minWordLength?: number
      limitResults?: number
    }
  ): Promise<MaterialSearchResult[]> => {
    const {
      similarityThreshold = 0.3,
      minWordLength = 3,
      limitResults = 10
    } = options || {}

    if (!searchName.trim()) {
      return []
    }

    console.log(`üîç –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è: "${searchName}"`)

    try {
      // 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
      const exactMatches = await findExactMatches(searchName)
      if (exactMatches.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: ${exactMatches.length}`)
        return exactMatches.slice(0, limitResults)
      }

      // 2. –ü–æ—Ç–æ–º –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
      const keywordMatches = await searchByKeywords(searchName, minWordLength, limitResults)
      if (keywordMatches.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: ${keywordMatches.length}`)
        return keywordMatches
      }

      // 3. –ò –≤ –∫–æ–Ω—Ü–µ –ø–æ–∏—Å–∫ –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É
      const similarityMatches = await searchBySimilarity(searchName, similarityThreshold, limitResults)
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É: ${similarityMatches.length}`)
      return similarityMatches

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', err)
      return []
    }
  }, [findExactMatches, searchByKeywords, searchBySimilarity])

  return {
    loading,
    error,
    searchBySimilarity,
    findExactMatches, 
    searchByKeywords,
    searchMaterials
  }
}